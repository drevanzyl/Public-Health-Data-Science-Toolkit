reticulate::repl_python()
reticulate::repl_python()
1+1
import matplotlib.pyplot as plt
import numpy as np
# Data Simulation
np.random.seed(42)  # For reproducibility
serum_cholesterol = np.random.normal(200, 40, 1000)  # Simulate serum cholesterol levels
aspirin_use = np.random.choice([0, 1], size=1000, p=[0.7, 0.3])  # Simulate aspirin use (binary)
employment_status = np.random.choice(['Full-time', 'Part-time', 'Unemployed', 'Retired'], 1000)  # Simulate employment status (nominal categorical)
ckd_stage = np.random.choice(['Stage 1', 'Stage 2', 'Stage 3', 'Stage 4', 'Stage 5'], 1000, p=[0.1, 0.2, 0.3, 0.25, 0.15])  # Simulate CKD stages (ordinal categorical)
# Plotting
fig, axs = plt.subplots(2, 2, figsize=(14, 10))
# Continuous Variable (Serum Cholesterol)
axs[0, 0].hist(serum_cholesterol, bins=30, color='skyblue', edgecolor='black')
axs[0, 0].set_title('Serum Cholesterol Levels (Continuous)')
axs[0, 0].set_xlabel('Cholesterol Level')
axs[0, 0].set_ylabel('Frequency')
# Binary Variable (Aspirin Use)
unique, counts = np.unique(aspirin_use, return_counts=True)
axs[0, 1].bar(['Not Using', 'Using'], counts, color=['salmon', 'lightgreen'])
axs[0, 1].set_title('Aspirin Use (Binary)')
axs[0, 1].set_ylabel('Count')
# Categorical Variable (Employment Status - Nominal)
unique, counts = np.unique(employment_status, return_counts=True)
axs[1, 0].bar(unique, counts, color='lightblue')
axs[1, 0].set_title('Employment Status (Nominal Categorical)')
axs[1, 0].set_ylabel('Count')
# Categorical Variable (CKD Stage - Ordinal)
unique, counts = np.unique(ckd_stage, return_counts=True)
axs[1, 1].bar(unique, counts, color='plum')
axs[1, 1].set_title('Chronic Kidney Disease Stage (Ordinal Categorical)')
axs[1, 1].set_ylabel('Count')
plt.tight_layout()
plt.show()
reticulate::repl_python()
# Adjusting the figure size and text size for better fit on the page
import matplotlib.pyplot as plt
import numpy as np
# Adjust figure size
fig, axs = plt.subplots(2, 2, figsize=(8, 5))
# Simulate data
np.random.seed(42)
serum_cholesterol = np.random.normal(200, 40, 1000)
aspirin_use = np.random.choice([0, 1], size=1000, p=[0.7, 0.3])
employment_status = np.random.choice(['Full-time', 'Part-time', 'Unemployed', 'Retired'], 1000)
ckd_stage = np.random.choice(['Stage 1', 'Stage 2', 'Stage 3', 'Stage 4', 'Stage 5'], 1000, p=[0.1, 0.2, 0.3, 0.25, 0.15])
# Customize font sizes
title_fontsize = 10
label_fontsize = 8
ticks_fontsize = 6
# Continuous Variable (Serum Cholesterol)
axs[0, 0].hist(serum_cholesterol, bins=30, color='skyblue', edgecolor='black')
axs[0, 0].set_title('Serum Cholesterol Levels (Continuous)', fontsize=title_fontsize)
axs[0, 0].set_xlabel('Cholesterol Level', fontsize=label_fontsize)
axs[0, 0].set_ylabel('Frequency', fontsize=label_fontsize)
axs[0, 0].tick_params(axis='both', which='major', labelsize=ticks_fontsize)
# Binary Variable (Aspirin Use)
unique, counts = np.unique(aspirin_use, return_counts=True)
axs[0, 1].bar(['Not Using', 'Using'], counts, color=['salmon', 'lightgreen'])
axs[0, 1].set_title('Aspirin Use (Binary)', fontsize=title_fontsize)
axs[0, 1].set_ylabel('Count', fontsize=label_fontsize)
axs[0, 1].tick_params(axis='x', labelsize=ticks_fontsize)
# Categorical Variable (Employment Status - Nominal)
unique, counts = np.unique(employment_status, return_counts=True)
axs[1, 0].bar(unique, counts, color='lightblue')
axs[1, 0].set_title('Employment Status (Nominal Categorical)', fontsize=title_fontsize)
axs[1, 0].set_ylabel('Count', fontsize=label_fontsize)
axs[1, 0].tick_params(axis='x', labelsize=ticks_fontsize, rotation=45)
# Categorical Variable (CKD Stage - Ordinal)
unique, counts = np.unique(ckd_stage, return_counts=True)
axs[1, 1].bar(unique, counts, color='plum')
axs[1, 1].set_title('Chronic Kidney Disease Stage (Ordinal Categorical)', fontsize=title_fontsize)
axs[1, 1].set_ylabel('Count', fontsize=label_fontsize)
axs[1, 1].tick_params(axis='x', labelsize=ticks_fontsize)
plt.tight_layout()
plt.show()
import numpy as np
import matplotlib.pyplot as plt
# Simulating BMI data with a right skew
np.random.seed(0)  # For reproducibility
bmi_data = np.concatenate([np.random.normal(25, 4, 5000), np.random.normal(30, 5, 1000)])
# Simulating fasting blood glucose levels with a right skew
glucose_data = np.concatenate([np.random.normal(90, 10, 5000), np.random.normal(130, 20, 1000)])
# Creating histograms
fig, ax = plt.subplots(1, 2, figsize=(8, 3))
# BMI Histogram
ax[0].hist(bmi_data, bins=30, color='skyblue', edgecolor='black')
ax[0].set_title('Histogram of BMI Values')
ax[0].set_xlabel('BMI')
ax[0].set_ylabel('Frequency')
# Blood Glucose Histogram
ax[1].hist(glucose_data, bins=30, color='lightgreen', edgecolor='black')
ax[1].set_title('Histogram of Fasting Blood Glucose Levels')
ax[1].set_xlabel('Blood Glucose (mg/dL)')
ax[1].set_ylabel('Frequency')
plt.tight_layout()
plt.show()
quit
reticulate::py_install("matplotlib","numpy")
reticulate::py_install(packages =  "matplotlib")
reticulate::py_install(packages =  "numpy")
reticulate::repl_python()
# Adjusting the figure size and text size for better fit on the page
import matplotlib.pyplot as plt
import numpy as np
# Adjust figure size
fig, axs = plt.subplots(2, 2, figsize=(8, 5))
# Simulate data
np.random.seed(42)
serum_cholesterol = np.random.normal(200, 40, 1000)
aspirin_use = np.random.choice([0, 1], size=1000, p=[0.7, 0.3])
employment_status = np.random.choice(['Full-time', 'Part-time', 'Unemployed', 'Retired'], 1000)
ckd_stage = np.random.choice(['Stage 1', 'Stage 2', 'Stage 3', 'Stage 4', 'Stage 5'], 1000, p=[0.1, 0.2, 0.3, 0.25, 0.15])
# Customize font sizes
title_fontsize = 10
label_fontsize = 8
ticks_fontsize = 6
# Continuous Variable (Serum Cholesterol)
axs[0, 0].hist(serum_cholesterol, bins=30, color='skyblue', edgecolor='black')
axs[0, 0].set_title('Serum Cholesterol Levels (Continuous)', fontsize=title_fontsize)
axs[0, 0].set_xlabel('Cholesterol Level', fontsize=label_fontsize)
axs[0, 0].set_ylabel('Frequency', fontsize=label_fontsize)
axs[0, 0].tick_params(axis='both', which='major', labelsize=ticks_fontsize)
# Binary Variable (Aspirin Use)
unique, counts = np.unique(aspirin_use, return_counts=True)
axs[0, 1].bar(['Not Using', 'Using'], counts, color=['salmon', 'lightgreen'])
axs[0, 1].set_title('Aspirin Use (Binary)', fontsize=title_fontsize)
axs[0, 1].set_ylabel('Count', fontsize=label_fontsize)
axs[0, 1].tick_params(axis='x', labelsize=ticks_fontsize)
# Categorical Variable (Employment Status - Nominal)
unique, counts = np.unique(employment_status, return_counts=True)
axs[1, 0].bar(unique, counts, color='lightblue')
axs[1, 0].set_title('Employment Status (Nominal Categorical)', fontsize=title_fontsize)
axs[1, 0].set_ylabel('Count', fontsize=label_fontsize)
axs[1, 0].tick_params(axis='x', labelsize=ticks_fontsize, rotation=45)
# Categorical Variable (CKD Stage - Ordinal)
unique, counts = np.unique(ckd_stage, return_counts=True)
axs[1, 1].bar(unique, counts, color='plum')
axs[1, 1].set_title('Chronic Kidney Disease Stage (Ordinal Categorical)', fontsize=title_fontsize)
axs[1, 1].set_ylabel('Count', fontsize=label_fontsize)
axs[1, 1].tick_params(axis='x', labelsize=ticks_fontsize)
plt.tight_layout()
plt.show()
quit
reticulate::py_install(packages =  "matplotlib")
reticulate::repl_python()
# Adjusting the figure size and text size for better fit on the page
import matplotlib.pyplot as plt
import numpy as np
# Adjust figure size
fig, axs = plt.subplots(2, 2, figsize=(8, 5))
# Simulate data
np.random.seed(42)
serum_cholesterol = np.random.normal(200, 40, 1000)
aspirin_use = np.random.choice([0, 1], size=1000, p=[0.7, 0.3])
employment_status = np.random.choice(['Full-time', 'Part-time', 'Unemployed', 'Retired'], 1000)
ckd_stage = np.random.choice(['Stage 1', 'Stage 2', 'Stage 3', 'Stage 4', 'Stage 5'], 1000, p=[0.1, 0.2, 0.3, 0.25, 0.15])
# Customize font sizes
title_fontsize = 10
label_fontsize = 8
ticks_fontsize = 6
# Continuous Variable (Serum Cholesterol)
axs[0, 0].hist(serum_cholesterol, bins=30, color='skyblue', edgecolor='black')
axs[0, 0].set_title('Serum Cholesterol Levels (Continuous)', fontsize=title_fontsize)
axs[0, 0].set_xlabel('Cholesterol Level', fontsize=label_fontsize)
axs[0, 0].set_ylabel('Frequency', fontsize=label_fontsize)
axs[0, 0].tick_params(axis='both', which='major', labelsize=ticks_fontsize)
# Binary Variable (Aspirin Use)
unique, counts = np.unique(aspirin_use, return_counts=True)
axs[0, 1].bar(['Not Using', 'Using'], counts, color=['salmon', 'lightgreen'])
axs[0, 1].set_title('Aspirin Use (Binary)', fontsize=title_fontsize)
axs[0, 1].set_ylabel('Count', fontsize=label_fontsize)
axs[0, 1].tick_params(axis='x', labelsize=ticks_fontsize)
# Categorical Variable (Employment Status - Nominal)
unique, counts = np.unique(employment_status, return_counts=True)
axs[1, 0].bar(unique, counts, color='lightblue')
axs[1, 0].set_title('Employment Status (Nominal Categorical)', fontsize=title_fontsize)
axs[1, 0].set_ylabel('Count', fontsize=label_fontsize)
axs[1, 0].tick_params(axis='x', labelsize=ticks_fontsize, rotation=45)
# Categorical Variable (CKD Stage - Ordinal)
unique, counts = np.unique(ckd_stage, return_counts=True)
axs[1, 1].bar(unique, counts, color='plum')
axs[1, 1].set_title('Chronic Kidney Disease Stage (Ordinal Categorical)', fontsize=title_fontsize)
axs[1, 1].set_ylabel('Count', fontsize=label_fontsize)
axs[1, 1].tick_params(axis='x', labelsize=ticks_fontsize)
plt.tight_layout()
plt.show()
reticulate::repl_python()
import numpy as np
import matplotlib.pyplot as plt
# Simulating BMI data with a right skew
np.random.seed(0)  # For reproducibility
bmi_data = np.concatenate([np.random.normal(25, 4, 5000), np.random.normal(30, 5, 1000)])
# Simulating fasting blood glucose levels with a right skew
glucose_data = np.concatenate([np.random.normal(90, 10, 5000), np.random.normal(130, 20, 1000)])
# Creating histograms
fig, ax = plt.subplots(1, 2, figsize=(8, 3))
# BMI Histogram
ax[0].hist(bmi_data, bins=30, color='skyblue', edgecolor='black')
ax[0].set_title('Histogram of BMI Values')
ax[0].set_xlabel('BMI')
ax[0].set_ylabel('Frequency')
# Blood Glucose Histogram
ax[1].hist(glucose_data, bins=30, color='lightgreen', edgecolor='black')
ax[1].set_title('Histogram of Fasting Blood Glucose Levels')
ax[1].set_xlabel('Blood Glucose (mg/dL)')
ax[1].set_ylabel('Frequency')
plt.tight_layout()
plt.show()
quit
Sys.setenv(RETICULATE_PYTHON = "C:/Users/andre/anaconda3/python.exe")
reticulate::repl_python()
import numpy as np
import matplotlib.pyplot as plt
# Simulating BMI data with a right skew
np.random.seed(0)  # For reproducibility
bmi_data = np.concatenate([np.random.normal(25, 4, 5000), np.random.normal(30, 5, 1000)])
# Simulating fasting blood glucose levels with a right skew
glucose_data = np.concatenate([np.random.normal(90, 10, 5000), np.random.normal(130, 20, 1000)])
# Creating histograms
fig, ax = plt.subplots(1, 2, figsize=(8, 3))
# BMI Histogram
ax[0].hist(bmi_data, bins=30, color='skyblue', edgecolor='black')
ax[0].set_title('Histogram of BMI Values')
ax[0].set_xlabel('BMI')
ax[0].set_ylabel('Frequency')
# Blood Glucose Histogram
ax[1].hist(glucose_data, bins=30, color='lightgreen', edgecolor='black')
ax[1].set_title('Histogram of Fasting Blood Glucose Levels')
ax[1].set_xlabel('Blood Glucose (mg/dL)')
ax[1].set_ylabel('Frequency')
plt.tight_layout()
plt.show()
Sys.setenv(RETICULATE_PYTHON = "C:/Users/andre/anaconda3/python.exe")
reticulate::repl_python()
import numpy as np
import matplotlib.pyplot as plt
# Simulating BMI data with a right skew
np.random.seed(0)  # For reproducibility
bmi_data = np.concatenate([np.random.normal(25, 4, 5000), np.random.normal(30, 5, 1000)])
# Simulating fasting blood glucose levels with a right skew
glucose_data = np.concatenate([np.random.normal(90, 10, 5000), np.random.normal(130, 20, 1000)])
# Creating histograms
fig, ax = plt.subplots(1, 2, figsize=(8, 3))
# BMI Histogram
ax[0].hist(bmi_data, bins=30, color='skyblue', edgecolor='black')
ax[0].set_title('Histogram of BMI Values')
ax[0].set_xlabel('BMI')
ax[0].set_ylabel('Frequency')
# Blood Glucose Histogram
ax[1].hist(glucose_data, bins=30, color='lightgreen', edgecolor='black')
ax[1].set_title('Histogram of Fasting Blood Glucose Levels')
ax[1].set_xlabel('Blood Glucose (mg/dL)')
ax[1].set_ylabel('Frequency')
plt.tight_layout()
plt.show()
# Adjusting the figure size and text size for better fit on the page
import matplotlib.pyplot as plt
import numpy as np
# Adjust figure size
fig, axs = plt.subplots(2, 2, figsize=(8, 5))
# Simulate data
np.random.seed(42)
serum_cholesterol = np.random.normal(200, 40, 1000)
aspirin_use = np.random.choice([0, 1], size=1000, p=[0.7, 0.3])
employment_status = np.random.choice(['Full-time', 'Part-time', 'Unemployed', 'Retired'], 1000)
ckd_stage = np.random.choice(['Stage 1', 'Stage 2', 'Stage 3', 'Stage 4', 'Stage 5'], 1000, p=[0.1, 0.2, 0.3, 0.25, 0.15])
# Customize font sizes
title_fontsize = 10
label_fontsize = 8
ticks_fontsize = 6
# Continuous Variable (Serum Cholesterol)
axs[0, 0].hist(serum_cholesterol, bins=30, color='skyblue', edgecolor='black')
axs[0, 0].set_title('Serum Cholesterol Levels (Continuous)', fontsize=title_fontsize)
axs[0, 0].set_xlabel('Cholesterol Level', fontsize=label_fontsize)
axs[0, 0].set_ylabel('Frequency', fontsize=label_fontsize)
axs[0, 0].tick_params(axis='both', which='major', labelsize=ticks_fontsize)
# Binary Variable (Aspirin Use)
unique, counts = np.unique(aspirin_use, return_counts=True)
axs[0, 1].bar(['Not Using', 'Using'], counts, color=['salmon', 'lightgreen'])
axs[0, 1].set_title('Aspirin Use (Binary)', fontsize=title_fontsize)
axs[0, 1].set_ylabel('Count', fontsize=label_fontsize)
axs[0, 1].tick_params(axis='x', labelsize=ticks_fontsize)
# Categorical Variable (Employment Status - Nominal)
unique, counts = np.unique(employment_status, return_counts=True)
axs[1, 0].bar(unique, counts, color='lightblue')
axs[1, 0].set_title('Employment Status (Nominal Categorical)', fontsize=title_fontsize)
axs[1, 0].set_ylabel('Count', fontsize=label_fontsize)
axs[1, 0].tick_params(axis='x', labelsize=ticks_fontsize, rotation=45)
# Categorical Variable (CKD Stage - Ordinal)
unique, counts = np.unique(ckd_stage, return_counts=True)
axs[1, 1].bar(unique, counts, color='plum')
axs[1, 1].set_title('Chronic Kidney Disease Stage (Ordinal Categorical)', fontsize=title_fontsize)
axs[1, 1].set_ylabel('Count', fontsize=label_fontsize)
axs[1, 1].tick_params(axis='x', labelsize=ticks_fontsize)
plt.tight_layout()
plt.show()
install.packages("rsconnect")
rsconnect::accounts()
rsconnect::setAccountInfo(name='andre-van-zyl', token='4E720CCFB4D69E8116A59A9AE737CD6B', secret='MObkpC/PR8v9XAag8H+eXUZmlDcXtjLsaxLJU8QG')
install.packages("htmltools")
install.packages(c("boot", "cluster", "codetools", "foreign", "lattice", "MASS", "Matrix", "mgcv", "nlme", "rpart", "survival"), lib="C:/Users/andre/AppData/Local/R/cache/R/renv/sandbox/R-4.3/x86_64-w64-mingw32/1e360f03")
rlang::last_trace()
install.packages("crayon")
rlang::last_trace()
rlang::last_trace(drop = FALSE)
rsconnect::setAccountInfo(name='andre-van-zyl', token='4E720CCFB4D69E8116A59A9AE737CD6B', secret='MObkpC/PR8v9XAag8H+eXUZmlDcXtjLsaxLJU8QG')
rsconnect::accountInfo()
rsconnect::setAccountInfo(name='andre-van-zyl', token='E0590A1968AB42EE8C2DBFF8185858B2', secret='tQhbhMb5dVjv90cM8dFNfKtJWvilUhib+oKgnTX4')
rsconnect::accountInfo()
rsconnect::setAccountInfo(name='andre-van-zyl', token='E0590A1968AB42EE8C2DBFF8185858B2', secret='tQhbhMb5dVjv90cM8dFNfKtJWvilUhib+oKgnTX4')
rsconnect::accountInfo()
quarto publish
