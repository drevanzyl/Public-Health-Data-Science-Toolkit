clean_text_title = clean_character_data(raw_text, case = "title"),
clean_text_sentence = clean_character_data(raw_text, case = "sentence"))
print(clean_data)
library(dplyr)
library(stringr)
# Define the function to clean the data with removal of all numbers and special characters
clean_character_data <- function(text, case = "lower") {
# Replace non-letter and non-space characters, including numbers, with nothing
cleaned_text <- str_replace_all(text, "[^\\p{L}\\s]", "")
# Replace multiple spaces and line breaks with a single space
cleaned_text <- str_replace_all(cleaned_text, "\\s+", " ")
# Trim leading and trailing spaces
cleaned_text <- trimws(cleaned_text)
# Apply the specified case transformation
switch(case,
"lower" = cleaned_text <- tolower(cleaned_text),
"upper" = cleaned_text <- toupper(cleaned_text),
"title" = cleaned_text <- tools::toTitleCase(cleaned_text),
"sentence" = {
cleaned_text <- tolower(cleaned_text)
cleaned_text <- sub("^(.)", "\\U\\1", cleaned_text, perl = TRUE)
},
cleaned_text <- cleaned_text  # default to returning the cleaned text as is if no case match
)
return(cleaned_text)
}
# Example data frame with multi-line text and numbers
data <- tibble(
raw_text = c("Hello, world! 123@#%@#^^", "Testing: 1, 2, 3.", "Clean? data! New line 456!")
)
# Use mutate to clean the data and apply different case options
clean_data <- data %>%
mutate(clean_text_lower = clean_character_data(raw_text, case = "lower"),
clean_text_upper = clean_character_data(raw_text, case = "upper"),
clean_text_title = clean_character_data(raw_text, case = "title"),
clean_text_sentence = clean_character_data(raw_text, case = "sentence"))
print(clean_data)
Location <- read_excel("Location.xlsx")
Location
library(dplyr)
library(readxl)
# Define a function that always creates a lookup vector and cleans data
# Allows specifying the sheet of the Excel file; defaults to the first sheet if not specified
clean_data <- function(raw_value, excel_path, excel_raw_col = "Raw Location Value", excel_clean_col = "Clean Location Value", sheet = NULL) {
# Load the lookup table from the specified or first sheet
if (is.null(sheet)) {
lookup_table <- read_excel(excel_path)
} else {
lookup_table <- read_excel(excel_path, sheet = sheet)
}
# Create the lookup vector
lookup_vector <- setNames(lookup_table[[excel_clean_col]], lookup_table[[excel_raw_col]])
# Return the cleaned value or the original if not found
ifelse(is.na(lookup_vector[raw_value]), raw_value, lookup_vector[raw_value])
}
# Example usage:
# Assuming 'Location' is your dataframe and 'Raw Location Value' is the column to clean
# Specify the path to the Excel file, sheet, and relevant columns
Location <- Location %>%
mutate(clean_location3 = clean_data(`Raw Location Value`, "Location_Lookup_Table.xlsx", sheet = 1))
Location
library(dplyr)
library(readxl)
# Define a function that always creates a lookup vector and cleans data
# Allows specifying the sheet of the Excel file; defaults to the first sheet if not specified
clean_data <- function(raw_value, excel_path, excel_raw_col = "Raw Location Value", excel_clean_col = "Clean Location Value", sheet = NULL) {
# Load the lookup table from the specified or first sheet
if (is.null(sheet)) {
lookup_table <- read_excel(excel_path)
} else {
lookup_table <- read_excel(excel_path, sheet = sheet)
}
# Create the lookup vector
lookup_vector <- setNames(lookup_table[[excel_clean_col]], lookup_table[[excel_raw_col]])
# Return the cleaned value or the original if not found
ifelse(is.na(lookup_vector[raw_value]), raw_value, lookup_vector[raw_value])
}
# Example usage:
# Assuming 'Location' is your dataframe and 'Raw Location Value' is the column to clean
# Specify the path to the Excel file, sheet, and relevant columns
Location <- Location %>%
mutate(clean_location = clean_data(`Raw Location Value`, "Location_Lookup_Table.xlsx"),
clean_location3 = clean_data(`Raw Location Value`, "Location_Lookup_Table.xlsx", sheet = 1))
Location
library(dplyr)
library(readxl)
# Define a function that always creates a lookup vector and cleans data
# Allows specifying the sheet of the Excel file; defaults to the first sheet if not specified
clean_data <- function(raw_value, excel_path, excel_raw_col = "Raw Location Value", excel_clean_col = "Clean Location Value", sheet = NULL) {
# Load the lookup table from the specified or first sheet
if (is.null(sheet)) {
lookup_table <- read_excel(excel_path)
} else {
lookup_table <- read_excel(excel_path, sheet = sheet)
}
# Create the lookup vector
lookup_vector <- setNames(lookup_table[[excel_clean_col]], lookup_table[[excel_raw_col]])
# Return the cleaned value or the original if not found
ifelse(is.na(lookup_vector[raw_value]), raw_value, lookup_vector[raw_value])
}
# Example usage:
# Assuming 'Location' is your dataframe and 'Raw Location Value' is the column to clean
# Specify the path to the Excel file, sheet, and relevant columns
Location <- Location %>%
mutate(clean_location = clean_data(`Raw Location Value`, "Location_Lookup_Table.xlsx"),
clean_location3 = clean_data(`Raw Location Value`, "Location_Lookup_Table.xlsx", sheet = 1))
Location <- read_excel("Location.xlsx")
Location
library(dplyr)
library(readxl)
# Define a function that always creates a lookup vector and cleans data
# Allows specifying the sheet of the Excel file; defaults to the first sheet if not specified
clean_data <- function(raw_value, excel_path, excel_raw_col = "Raw Location Value", excel_clean_col = "Clean Location Value", sheet = NULL) {
# Load the lookup table from the specified or first sheet
if (is.null(sheet)) {
lookup_table <- read_excel(excel_path)
} else {
lookup_table <- read_excel(excel_path, sheet = sheet)
}
# Create the lookup vector
lookup_vector <- setNames(lookup_table[[excel_clean_col]], lookup_table[[excel_raw_col]])
# Return the cleaned value or the original if not found
ifelse(is.na(lookup_vector[raw_value]), raw_value, lookup_vector[raw_value])
}
# Example usage:
# Assuming 'Location' is your dataframe and 'Raw Location Value' is the column to clean
# Specify the path to the Excel file, sheet, and relevant columns
Location <- Location %>%
mutate(clean_location = clean_data(`Raw Location Value`, "Location_Lookup_Table.xlsx"),
clean_location3 = clean_data(`Raw Location Value`, "Location_Lookup_Table.xlsx", sheet = 1))
Location
install.packages("mermaid")
install.packages("graphviz")
install.packages("devtools")
library(devtools)
install_github("ropensci/rentrez")
library(rentrez, help, pos = 2, lib.loc = NULL)
entrez_dbs()
entrez_db_summary("biosample")
# install.packages("devtools")
# library(devtools)
# install_github("ropensci/rentrez")
entrez_db_links("biosample")
search_fields <- entrez_db_searchable("biosample")
library(rentrez, help, pos = 2, lib.loc = NULL)
entrez_dbs()
entrez_db_summary("biosample")
search_fields <- entrez_db_searchable("biosample")
search_fields
entrez_db_links("biosample")
entrez_db_summary("bioproject")
search_fields <- entrez_db_searchable("bioproject")
search_fields
entrez_db_links("bioproject")
search_fields$PID
search_fields$PID$FullName
search_fields$PID$FullName
search_fields$PID$bioproject
search_fields$PID$Hierarchy
search_fields$PID
search_fields <- entrez_db_searchable("bioproject")
search_fields
search_fields$PRJA
library(rentrez, help, pos = 2, lib.loc = NULL)
entrez_dbs()
entrez_db_summary("bioproject")
search_fields <- entrez_db_searchable("bioproject")
search_fields$PRJA
search_fields$PID
entrez_db_links("bioproject")
entrez_db_links
install.packages("bigrquery")
library(bigrquery)
billing <- bq_test_project() # replace this with your project ID
library(bigrquery)
billing <- ncbi-pathogen-detect.pdbrowser.isolates() # replace this with your project ID
install.packages("googlesheets4")
library(googlesheets4)
# Google Sheets URL
sheet_url <- "https://docs.google.com/spreadsheets/d/1KBezH3NB7NUJIgiODLo--Tb8M2ILX6umnKqDBEQCmto/edit?gid=1487609945#gid=1487609945"
# Read the data from the Google Sheets URL
data <- read_sheet(sheet_url)
library(googlesheets4)
# Google Sheets URL
sheet_url <- "https://docs.google.com/spreadsheets/d/1KBezH3NB7NUJIgiODLo--Tb8M2ILX6umnKqDBEQCmto/edit?gid=1487609945#gid=1487609945"
# Read the data from the Google Sheets URL
data <- read_sheet(sheet_url)
library(googlesheets4)
# Set the scopes to read the Google Sheets document
gs4_auth(
scopes = "https://www.googleapis.com/auth/spreadsheets.readonly"
)
install.packages('esquisse')
library(readr)
data <- read_csv("integration_with_tools/dhis2/data.csv")
library(readr)
data <- read_csv("integration_with_tools/dhis2/data.csv")
library(readr)
data <- read_csv("integration_with_tools/dhis2/data.csv")
View(data)
library(readr)
data <- read_csv("integration_with_tools/dhis2/data.csv")
esquisse:::esquisser()
ggplot(data) +
aes(x = Period, y = Value, fill = Data) +
geom_col(position = "dodge") +
scale_fill_hue(direction = 1) +
theme_minimal() +
facet_wrap(vars(Area), ncol = 1L)
library(ggplot2)
ggplot(data) +
aes(x = Period, y = Value, fill = Data) +
geom_col(position = "dodge") +
scale_fill_hue(direction = 1) +
theme_minimal() +
facet_wrap(vars(Area), ncol = 1L)
library(ggplot2)
ggplot(data) +
aes(x = Period, y = Value, fill = Data) +
geom_col(position = "dodge") +
scale_fill_hue(direction = 1) +
theme_minimal() +
facet_grid(Data) +
facet_wrap(vars(Area), ncol = 1L)
library(ggplot2)
ggplot(data) +
aes(x = Period, y = Value, fill = Data) +
geom_col(position = "dodge") +
scale_fill_hue(direction = 1) +
theme_minimal() +
facet_grid("Data") +
facet_wrap(vars(Area), ncol = 1L)
library(ggplot2)
ggplot(data) +
aes(x = Period, y = Value, fill = Data) +
geom_col(position = "dodge") +
scale_fill_hue(direction = 1) +
theme_minimal() +
facet_grid(~Data) +
facet_wrap(vars(Area), ncol = 1L)
library(ggplot2)
ggplot(data) +
aes(x = Period, y = Value) +
geom_col(position = "dodge") +
scale_fill_hue(direction = 1) +
theme_minimal() +
facet_grid(~Data) +
facet_wrap(vars(Area), ncol = 1L)
library(ggplot2)
ggplot(data) +
aes(x = Period, y = Value, fill = Data) +
geom_col(position = "dodge") +
scale_fill_hue(direction = 1) +
theme_minimal() +
facet_grid(~Data) +
facet_wrap(vars(Area), ncol = 1L)
library(ggplot2)
ggplot(data) +
aes(x = Period, y = Value, fill = Area) +
geom_col(position = "dodge") +
scale_fill_hue(direction = 1) +
theme_minimal() +
facet_grid(~Data) +
facet_wrap(vars(Data), ncol = 1L)
library(ggplot2)
ggplot(data) +
aes(x = Period, y = Value, fill = Area) +
geom_col(position = "dodge") +
scale_fill_hue(direction = 1) +
theme_minimal() +
facet_grid(vars(Area)) +
facet_wrap(vars(Data), ncol = 1L)
library(ggplot2)
ggplot(data) +
aes(x = Period, y = Value) +
geom_col(position = "dodge") +
scale_fill_hue(direction = 1) +
theme_minimal() +
facet_grid(vars(Area)) +
facet_wrap(vars(Data), ncol = 1L)
library(ggplot2)
ggplot(data) +
aes(x = Period, y = Value) +
geom_col(position = "dodge") +
scale_fill_hue(direction = 1) +
theme_minimal() +
facet_wrap(vars(Data + Area), ncol = 1L)
library(ggplot2)
ggplot(data) +
aes(x = Period, y = Value) +
geom_col(position = "dodge") +
scale_fill_hue(direction = 1) +
theme_minimal() +
facet_wrap(~Data + Area, ncol = 1L)
esquisse:::esquisser()
library(readr)
data <- read_csv("integration_with_tools/dhis2/data.csv")
library(readr)
data <- read_csv("C:/Users/andre/Documents/Git/Public-Health-Data-Science-Toolkit/integration_with_tools/dhis2/data.csv")
View(data)
esquisse:::esquisser()
library(ggplot2)
ggplot(data) +
aes(x = Period, y = Value) +
geom_col(position = "dodge") +
scale_fill_hue(direction = 1) +
theme_minimal() +
facet_wrap(~Data + Area, ncol = 1L)
library(ggplot2)
ggplot(data) +
aes(x = Period, y = Value) +
geom_col(position = "dodge") +
scale_fill_hue(direction = 1) +
theme_minimal() +
facet_wrap(~Data + Area, ncol = 1L)
library(ggplot2)
ggplot(data) +
aes(x = Period, y = Value) +
geom_col(position = "dodge") +
scale_fill_hue(direction = 1) +
theme_minimal()
+ coord_flip()+
facet_wrap(~Data + Area, ncol = 1L)
library(ggplot2)
ggplot(data) +
aes(x = Period, y = Value) +
geom_col(position = "dodge") +
scale_fill_hue(direction = 1) +
theme_minimal() + coord_flip()+
facet_wrap(~Data + Area, ncol = 1L)
#| out-width: 100%
#|
library(ggplot2)
ggplot(data) +
aes(x = Period, y = Value) +
geom_col(position = "dodge") +
scale_fill_hue(direction = 1) +
theme_minimal() + coord_flip()+
facet_wrap(~Data + Area, ncol = 1L)
knitr::opts_chunk$set(echo = TRUE)
library(readr)
data <- read_csv("C:/Users/andre/Documents/Git/Public-Health-Data-Science-Toolkit/integration_with_tools/dhis2/data.csv")
library(ggplot2)
ggplot(data) +
aes(x = Period, y = Value) +
geom_col(position = "dodge") +
scale_fill_hue(direction = 1) +
theme_minimal() + coord_flip()+
facet_wrap(~Data + Area, ncol = 1L)
library(ggplot2)
ggplot(data) +
aes(x = Period, y = Value) +
geom_col(position = "dodge") +
scale_fill_hue(direction = 1) +
theme_minimal() + coord_flip()+
facet_wrap(~Data + Area, ncol = 1L)
library(ggplot2)
ggplot(data) +
aes(x = Period, y = Value) +
geom_col(position = "dodge") +
scale_fill_hue(direction = 1) +
theme_minimal() + #coord_flip()+
facet_wrap(~Data + Area, ncol = 1L)
library(ggplot2)
ggplot(data) +
aes(x = Period, y = Value) +
geom_col(position = "dodge") +
scale_fill_hue(direction = 1) +
theme_minimal() + #coord_flip()+
facet_wrap(~Data + Area, ncol = 3L)
library(ggplot2)
ggplot(data) +
aes(x = Period, y = Value) +
geom_col(position = "dodge") +
scale_fill_hue(direction = 1) +
theme_minimal() + coord_flip()+
facet_wrap(~Data + Area, ncol = 3L)
library(ggplot2)
ggplot(data) +
aes(x = Period, y = Value) +
geom_col(position = "dodge") +
scale_fill_hue(direction = 1) +
theme_minimal() + coord_flip()+
facet_wrap(~Data + Area, ncol = 4L)
library(ggplot2)
ggplot(data) +
aes(x = Period, y = Value) +
geom_col(position = "dodge") +
scale_fill_hue(direction = 1) +
theme_minimal() + coord_flip()+
facet_wrap(~Data + Area, ncol = 4L)
library(ggplot2)
ggplot(data) +
aes(x = Period, y = Value) +
geom_col(position = "dodge") +
scale_fill_hue(direction = 1) +
theme_minimal() + coord_flip()+
facet_wrap(~Data + Area, ncol = 4L)
library(ggplot2)
ggplot(data) +
aes(x = Period, y = Value) +
geom_col(position = "dodge") +
scale_fill_hue(direction = 1) +
theme_minimal() + coord_flip()+
facet_wrap(~Data + Area, ncol = 4L)
library(ggplot2)
ggplot(data) +
aes(x = Period, y = Value, fill = Value) +
geom_col(position = "dodge") +
scale_fill_hue(direction = 1) +
theme_minimal() + coord_flip()+
facet_wrap(~Data + Area, ncol = 4L)
library(ggplot2)
ggplot(data) +
aes(x = Period, y = Value) +
scale_fill_hue(direction = 1)
geom_col(position = "dodge") +
scale_fill_hue(direction = 1) +
theme_minimal() + coord_flip()+
facet_wrap(~Data + Area, ncol = 4L)
library(ggplot2)
ggplot(data) +
aes(x = Period, y = Value) +
#scale_fill_hue(direction = 1)
geom_col(position = "dodge") +
scale_fill_hue(direction = 1) +
theme_minimal() + coord_flip()+
facet_wrap(~Data + Area, ncol = 4L)
library(ggplot2)
ggplot(data) +
aes(x = Period, y = Value, fill = Data) +
geom_col(position = "dodge") +
scale_fill_hue(direction = 1) +
theme_minimal() + coord_flip()+
facet_wrap(~Data + Area, ncol = 4L)
library(ggplot2)
ggplot(data) +
aes(x = Period, y = Value, fill = Value) +
geom_col(position = "dodge") +
scale_fill_hue(direction = 1) +
theme_minimal() + coord_flip()+
facet_wrap(~Data + Area, ncol = 4L)
library(ggplot2)
library(viridis)
install.packages("viridis")
library(ggplot2)
library(viridis)
ggplot(data) +
aes(x = Period, y = Value, fill = Value) +
geom_col(position = "dodge") +
scale_fill_viridis_c() +
theme_minimal() +
coord_flip() +
facet_wrap(~Data + Area, ncol = 4L)
library(ggplot2)
library(viridis)
ggplot(data) +
aes(x = Period, y = Value, fill = Value) +
geom_col(position = "dodge") +
scale_fill_viridis_c() +
theme_minimal() +
coord_flip() +
facet_wrap(~Data + Area, ncol = 4L)
library(ggplot2)
ggplot(data) +
aes(x = Period, y = Value, fill = Value) +
geom_col(position = "dodge") +
scale_fill_gradient(low = "blue", high = "red") +
theme_minimal() +
coord_flip() +
facet_wrap(~Data + Area, ncol = 4L)
library(ggplot2)
ggplot(data) +
aes(x = Period, y = Value, fill = Value) +
geom_col(position = "dodge") +
scale_fill_gradient(low = "blue", high = "red") +
theme_minimal() +
coord_flip() +
facet_wrap(~Data + Area, ncol = 4L)
library(ggplot2)
ggplot(data) +
aes(x = Period, y = Value, fill = Value) +
geom_col(position = "dodge") +
scale_fill_gradient(low = "blue", high = "red") +
theme_minimal() +
coord_flip() +
facet_wrap(~Data + Area, ncol = 4L)
library(ggplot2)
ggplot(data) +
aes(x = Period, y = Value, fill = Value) +
geom_col(position = "dodge") +
scale_fill_gradient(low = "blue", high = "red") +
theme_minimal() +
coord_flip() +
facet_wrap(~Data + Area, ncol = 4L)
library(ggplot2)
ggplot(data) +
aes(x = Period, y = Value, fill = Value) +
geom_col(position = "dodge") +
scale_fill_gradient(low = "blue", high = "red") +
theme_minimal() +
coord_flip() +
facet_wrap(~ Area  + Data, ncol = 4L)
library(ggplot2)
ggplot(data) +
aes(x = Period, y = Value, fill = Value) +
geom_col(position = "dodge") +
scale_fill_gradient(low = "blue", high = "red") +
theme_minimal() +
coord_flip() +
facet_wrap(~ Area  + Data, ncol = 3L)
data
