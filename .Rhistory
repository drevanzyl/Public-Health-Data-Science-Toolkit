install.packages("googlesheets4")
library(googlesheets4)
# Google Sheets URL
sheet_url <- "https://docs.google.com/spreadsheets/d/1KBezH3NB7NUJIgiODLo--Tb8M2ILX6umnKqDBEQCmto/edit?gid=1487609945#gid=1487609945"
# Read the data from the Google Sheets URL
data <- read_sheet(sheet_url)
library(googlesheets4)
# Google Sheets URL
sheet_url <- "https://docs.google.com/spreadsheets/d/1KBezH3NB7NUJIgiODLo--Tb8M2ILX6umnKqDBEQCmto/edit?gid=1487609945#gid=1487609945"
# Read the data from the Google Sheets URL
data <- read_sheet(sheet_url)
library(googlesheets4)
# Set the scopes to read the Google Sheets document
gs4_auth(
scopes = "https://www.googleapis.com/auth/spreadsheets.readonly"
)
install.packages('esquisse')
library(readr)
data <- read_csv("integration_with_tools/dhis2/data.csv")
library(readr)
data <- read_csv("integration_with_tools/dhis2/data.csv")
library(readr)
data <- read_csv("integration_with_tools/dhis2/data.csv")
View(data)
library(readr)
data <- read_csv("integration_with_tools/dhis2/data.csv")
esquisse:::esquisser()
ggplot(data) +
aes(x = Period, y = Value, fill = Data) +
geom_col(position = "dodge") +
scale_fill_hue(direction = 1) +
theme_minimal() +
facet_wrap(vars(Area), ncol = 1L)
library(ggplot2)
ggplot(data) +
aes(x = Period, y = Value, fill = Data) +
geom_col(position = "dodge") +
scale_fill_hue(direction = 1) +
theme_minimal() +
facet_wrap(vars(Area), ncol = 1L)
library(ggplot2)
ggplot(data) +
aes(x = Period, y = Value, fill = Data) +
geom_col(position = "dodge") +
scale_fill_hue(direction = 1) +
theme_minimal() +
facet_grid(Data) +
facet_wrap(vars(Area), ncol = 1L)
library(ggplot2)
ggplot(data) +
aes(x = Period, y = Value, fill = Data) +
geom_col(position = "dodge") +
scale_fill_hue(direction = 1) +
theme_minimal() +
facet_grid("Data") +
facet_wrap(vars(Area), ncol = 1L)
library(ggplot2)
ggplot(data) +
aes(x = Period, y = Value, fill = Data) +
geom_col(position = "dodge") +
scale_fill_hue(direction = 1) +
theme_minimal() +
facet_grid(~Data) +
facet_wrap(vars(Area), ncol = 1L)
library(ggplot2)
ggplot(data) +
aes(x = Period, y = Value) +
geom_col(position = "dodge") +
scale_fill_hue(direction = 1) +
theme_minimal() +
facet_grid(~Data) +
facet_wrap(vars(Area), ncol = 1L)
library(ggplot2)
ggplot(data) +
aes(x = Period, y = Value, fill = Data) +
geom_col(position = "dodge") +
scale_fill_hue(direction = 1) +
theme_minimal() +
facet_grid(~Data) +
facet_wrap(vars(Area), ncol = 1L)
library(ggplot2)
ggplot(data) +
aes(x = Period, y = Value, fill = Area) +
geom_col(position = "dodge") +
scale_fill_hue(direction = 1) +
theme_minimal() +
facet_grid(~Data) +
facet_wrap(vars(Data), ncol = 1L)
library(ggplot2)
ggplot(data) +
aes(x = Period, y = Value, fill = Area) +
geom_col(position = "dodge") +
scale_fill_hue(direction = 1) +
theme_minimal() +
facet_grid(vars(Area)) +
facet_wrap(vars(Data), ncol = 1L)
library(ggplot2)
ggplot(data) +
aes(x = Period, y = Value) +
geom_col(position = "dodge") +
scale_fill_hue(direction = 1) +
theme_minimal() +
facet_grid(vars(Area)) +
facet_wrap(vars(Data), ncol = 1L)
library(ggplot2)
ggplot(data) +
aes(x = Period, y = Value) +
geom_col(position = "dodge") +
scale_fill_hue(direction = 1) +
theme_minimal() +
facet_wrap(vars(Data + Area), ncol = 1L)
library(ggplot2)
ggplot(data) +
aes(x = Period, y = Value) +
geom_col(position = "dodge") +
scale_fill_hue(direction = 1) +
theme_minimal() +
facet_wrap(~Data + Area, ncol = 1L)
esquisse:::esquisser()
library(readr)
data <- read_csv("integration_with_tools/dhis2/data.csv")
library(readr)
data <- read_csv("C:/Users/andre/Documents/Git/Public-Health-Data-Science-Toolkit/integration_with_tools/dhis2/data.csv")
View(data)
esquisse:::esquisser()
library(ggplot2)
ggplot(data) +
aes(x = Period, y = Value) +
geom_col(position = "dodge") +
scale_fill_hue(direction = 1) +
theme_minimal() +
facet_wrap(~Data + Area, ncol = 1L)
library(ggplot2)
ggplot(data) +
aes(x = Period, y = Value) +
geom_col(position = "dodge") +
scale_fill_hue(direction = 1) +
theme_minimal() +
facet_wrap(~Data + Area, ncol = 1L)
library(ggplot2)
ggplot(data) +
aes(x = Period, y = Value) +
geom_col(position = "dodge") +
scale_fill_hue(direction = 1) +
theme_minimal()
+ coord_flip()+
facet_wrap(~Data + Area, ncol = 1L)
library(ggplot2)
ggplot(data) +
aes(x = Period, y = Value) +
geom_col(position = "dodge") +
scale_fill_hue(direction = 1) +
theme_minimal() + coord_flip()+
facet_wrap(~Data + Area, ncol = 1L)
#| out-width: 100%
#|
library(ggplot2)
ggplot(data) +
aes(x = Period, y = Value) +
geom_col(position = "dodge") +
scale_fill_hue(direction = 1) +
theme_minimal() + coord_flip()+
facet_wrap(~Data + Area, ncol = 1L)
knitr::opts_chunk$set(echo = TRUE)
library(readr)
data <- read_csv("C:/Users/andre/Documents/Git/Public-Health-Data-Science-Toolkit/integration_with_tools/dhis2/data.csv")
library(ggplot2)
ggplot(data) +
aes(x = Period, y = Value) +
geom_col(position = "dodge") +
scale_fill_hue(direction = 1) +
theme_minimal() + coord_flip()+
facet_wrap(~Data + Area, ncol = 1L)
library(ggplot2)
ggplot(data) +
aes(x = Period, y = Value) +
geom_col(position = "dodge") +
scale_fill_hue(direction = 1) +
theme_minimal() + coord_flip()+
facet_wrap(~Data + Area, ncol = 1L)
library(ggplot2)
ggplot(data) +
aes(x = Period, y = Value) +
geom_col(position = "dodge") +
scale_fill_hue(direction = 1) +
theme_minimal() + #coord_flip()+
facet_wrap(~Data + Area, ncol = 1L)
library(ggplot2)
ggplot(data) +
aes(x = Period, y = Value) +
geom_col(position = "dodge") +
scale_fill_hue(direction = 1) +
theme_minimal() + #coord_flip()+
facet_wrap(~Data + Area, ncol = 3L)
library(ggplot2)
ggplot(data) +
aes(x = Period, y = Value) +
geom_col(position = "dodge") +
scale_fill_hue(direction = 1) +
theme_minimal() + coord_flip()+
facet_wrap(~Data + Area, ncol = 3L)
library(ggplot2)
ggplot(data) +
aes(x = Period, y = Value) +
geom_col(position = "dodge") +
scale_fill_hue(direction = 1) +
theme_minimal() + coord_flip()+
facet_wrap(~Data + Area, ncol = 4L)
library(ggplot2)
ggplot(data) +
aes(x = Period, y = Value) +
geom_col(position = "dodge") +
scale_fill_hue(direction = 1) +
theme_minimal() + coord_flip()+
facet_wrap(~Data + Area, ncol = 4L)
library(ggplot2)
ggplot(data) +
aes(x = Period, y = Value) +
geom_col(position = "dodge") +
scale_fill_hue(direction = 1) +
theme_minimal() + coord_flip()+
facet_wrap(~Data + Area, ncol = 4L)
library(ggplot2)
ggplot(data) +
aes(x = Period, y = Value) +
geom_col(position = "dodge") +
scale_fill_hue(direction = 1) +
theme_minimal() + coord_flip()+
facet_wrap(~Data + Area, ncol = 4L)
library(ggplot2)
ggplot(data) +
aes(x = Period, y = Value, fill = Value) +
geom_col(position = "dodge") +
scale_fill_hue(direction = 1) +
theme_minimal() + coord_flip()+
facet_wrap(~Data + Area, ncol = 4L)
library(ggplot2)
ggplot(data) +
aes(x = Period, y = Value) +
scale_fill_hue(direction = 1)
geom_col(position = "dodge") +
scale_fill_hue(direction = 1) +
theme_minimal() + coord_flip()+
facet_wrap(~Data + Area, ncol = 4L)
library(ggplot2)
ggplot(data) +
aes(x = Period, y = Value) +
#scale_fill_hue(direction = 1)
geom_col(position = "dodge") +
scale_fill_hue(direction = 1) +
theme_minimal() + coord_flip()+
facet_wrap(~Data + Area, ncol = 4L)
library(ggplot2)
ggplot(data) +
aes(x = Period, y = Value, fill = Data) +
geom_col(position = "dodge") +
scale_fill_hue(direction = 1) +
theme_minimal() + coord_flip()+
facet_wrap(~Data + Area, ncol = 4L)
library(ggplot2)
ggplot(data) +
aes(x = Period, y = Value, fill = Value) +
geom_col(position = "dodge") +
scale_fill_hue(direction = 1) +
theme_minimal() + coord_flip()+
facet_wrap(~Data + Area, ncol = 4L)
library(ggplot2)
library(viridis)
install.packages("viridis")
library(ggplot2)
library(viridis)
ggplot(data) +
aes(x = Period, y = Value, fill = Value) +
geom_col(position = "dodge") +
scale_fill_viridis_c() +
theme_minimal() +
coord_flip() +
facet_wrap(~Data + Area, ncol = 4L)
library(ggplot2)
library(viridis)
ggplot(data) +
aes(x = Period, y = Value, fill = Value) +
geom_col(position = "dodge") +
scale_fill_viridis_c() +
theme_minimal() +
coord_flip() +
facet_wrap(~Data + Area, ncol = 4L)
library(ggplot2)
ggplot(data) +
aes(x = Period, y = Value, fill = Value) +
geom_col(position = "dodge") +
scale_fill_gradient(low = "blue", high = "red") +
theme_minimal() +
coord_flip() +
facet_wrap(~Data + Area, ncol = 4L)
library(ggplot2)
ggplot(data) +
aes(x = Period, y = Value, fill = Value) +
geom_col(position = "dodge") +
scale_fill_gradient(low = "blue", high = "red") +
theme_minimal() +
coord_flip() +
facet_wrap(~Data + Area, ncol = 4L)
library(ggplot2)
ggplot(data) +
aes(x = Period, y = Value, fill = Value) +
geom_col(position = "dodge") +
scale_fill_gradient(low = "blue", high = "red") +
theme_minimal() +
coord_flip() +
facet_wrap(~Data + Area, ncol = 4L)
library(ggplot2)
ggplot(data) +
aes(x = Period, y = Value, fill = Value) +
geom_col(position = "dodge") +
scale_fill_gradient(low = "blue", high = "red") +
theme_minimal() +
coord_flip() +
facet_wrap(~Data + Area, ncol = 4L)
library(ggplot2)
ggplot(data) +
aes(x = Period, y = Value, fill = Value) +
geom_col(position = "dodge") +
scale_fill_gradient(low = "blue", high = "red") +
theme_minimal() +
coord_flip() +
facet_wrap(~ Area  + Data, ncol = 4L)
library(ggplot2)
ggplot(data) +
aes(x = Period, y = Value, fill = Value) +
geom_col(position = "dodge") +
scale_fill_gradient(low = "blue", high = "red") +
theme_minimal() +
coord_flip() +
facet_wrap(~ Area  + Data, ncol = 3L)
data
# Sample data
library(tidyverse)
set.seed(123)  # for reproducibility
sample_data <- tibble(
`Clinical culture isolates with AST conducted` = sample(100:200, 5),
`Carbapenem-resistant clinical culture isolates` = sample(10:50, 5),
`Clinical culture isolates with CP testing conducted` = sample(80:150, 5),
`Clinical culture isolates with CP detected` = sample(5:30, 5),
`Clinical culture isolates with Gene/Enzyme testing conducted` = sample(70:130, 5),
`Clinical culture isolates with Gene/Enzyme detected` = sample(3:25, 5),
`CP or gene/enzyme testing conducted (number)` = sample(60:120, 5),
`CP or gene/enzyme detected (number)` = sample(2:20, 5)
)
# Display the sample data
print(sample_data)
# Configuration CSV content
config_csv <- '
Numerator,Denominator,Name
"Carbapenem-resistant clinical culture isolates","Clinical culture isolates with AST conducted","Proportion of isolates resistant to at least 1 carbapenem (%)"
"Clinical culture isolates with CP detected","Clinical culture isolates with CP testing conducted","Proportion of isolates with phenotypic CP detected (%)"
"Clinical culture isolates with Gene/Enzyme detected","Clinical culture isolates with Gene/Enzyme testing conducted","Proportion of isolates with gene/enzyme detected (%)"
"CP or gene/enzyme detected (number)","CP or gene/enzyme testing conducted (number)","Proportion of isolates identified as CPO (%)"
'
# Write the configuration to a CSV file
write_csv(read_csv(config_csv), "proportion_config.csv")
# Now you can use the function like this:
result <- calculate_bulk_proportions(sample_data, "proportion_config.csv")
library(tidyverse)
library(readr)
calculate_bulk_proportions <- function(data, config_file) {
# Read the configuration CSV file
config <- read_csv(config_file)
# Function to safely calculate proportion
safe_proportion <- function(numerator, denominator) {
if (is.na(numerator) || is.na(denominator) || denominator == 0) {
return(NA)
}
return(numerator / denominator)
}
# Iterate through each row in the config file
for (i in 1:nrow(config)) {
numerator_col <- config$Numerator[i]
denominator_col <- config$Denominator[i]
proportion_name <- config$Name[i]
# Check if columns exist in the data
if (!(numerator_col %in% names(data)) || !(denominator_col %in% names(data))) {
warning(paste("Columns", numerator_col, "or", denominator_col, "not found in data. Skipping."))
next
}
# Calculate the proportion
data <- data %>%
mutate(!!proportion_name := safe_proportion(!!sym(numerator_col), !!sym(denominator_col)))
# Move the new column after the numerator column
col_index <- which(names(data) == numerator_col)
data <- data %>%
relocate(!!proportion_name, .after = !!sym(numerator_col))
}
return(data)
}
# Sample data
library(tidyverse)
set.seed(123)  # for reproducibility
sample_data <- tibble(
`Clinical culture isolates with AST conducted` = sample(100:200, 5),
`Carbapenem-resistant clinical culture isolates` = sample(10:50, 5),
`Clinical culture isolates with CP testing conducted` = sample(80:150, 5),
`Clinical culture isolates with CP detected` = sample(5:30, 5),
`Clinical culture isolates with Gene/Enzyme testing conducted` = sample(70:130, 5),
`Clinical culture isolates with Gene/Enzyme detected` = sample(3:25, 5),
`CP or gene/enzyme testing conducted (number)` = sample(60:120, 5),
`CP or gene/enzyme detected (number)` = sample(2:20, 5)
)
# Display the sample data
print(sample_data)
# Configuration CSV content
config_csv <- '
Numerator,Denominator,Name
"Carbapenem-resistant clinical culture isolates","Clinical culture isolates with AST conducted","Proportion of isolates resistant to at least 1 carbapenem (%)"
"Clinical culture isolates with CP detected","Clinical culture isolates with CP testing conducted","Proportion of isolates with phenotypic CP detected (%)"
"Clinical culture isolates with Gene/Enzyme detected","Clinical culture isolates with Gene/Enzyme testing conducted","Proportion of isolates with gene/enzyme detected (%)"
"CP or gene/enzyme detected (number)","CP or gene/enzyme testing conducted (number)","Proportion of isolates identified as CPO (%)"
'
# Write the configuration to a CSV file
write_csv(read_csv(config_csv), "proportion_config.csv")
# Now you can use the function like this:
result <- calculate_bulk_proportions(sample_data, "proportion_config.csv")
sample_data
config_csv
# Sample data
library(tidyverse)
set.seed(123)  # for reproducibility
sample_data <- tibble(
`Clinical culture isolates with AST conducted` = sample(100:200, 5),
`Carbapenem-resistant clinical culture isolates` = sample(10:50, 5),
`Clinical culture isolates with CP testing conducted` = sample(80:150, 5),
`Clinical culture isolates with CP detected` = sample(5:30, 5),
`Clinical culture isolates with Gene/Enzyme testing conducted` = sample(70:130, 5),
`Clinical culture isolates with Gene/Enzyme detected` = sample(3:25, 5),
`CP or gene/enzyme testing conducted (number)` = sample(60:120, 5),
`CP or gene/enzyme detected (number)` = sample(2:20, 5)
)
# Display the sample data
print(sample_data)
# Configuration CSV content
config_csv <- '
Numerator,Denominator,Name
"Carbapenem-resistant clinical culture isolates","Clinical culture isolates with AST conducted","Proportion of isolates resistant to at least 1 carbapenem (%)"
"Clinical culture isolates with CP detected","Clinical culture isolates with CP testing conducted","Proportion of isolates with phenotypic CP detected (%)"
"Clinical culture isolates with Gene/Enzyme detected","Clinical culture isolates with Gene/Enzyme testing conducted","Proportion of isolates with gene/enzyme detected (%)"
"CP or gene/enzyme detected (number)","CP or gene/enzyme testing conducted (number)","Proportion of isolates identified as CPO (%)"
'
# Write the configuration to a CSV file
write_csv(read_csv(config_csv), "proportion_config.csv")
# Now you can use the function like this:
result <- calculate_bulk_proportions(sample_data, "proportion_config.csv")
library(tidyverse)
library(readr)
calculate_bulk_proportions <- function(data, config_file) {
# Read the configuration CSV file
config <- read_csv(config_file, show_col_types = FALSE)
# Function to safely calculate proportion
safe_proportion <- function(numerator, denominator) {
ifelse(is.na(numerator) | is.na(denominator) | denominator == 0,
NA_real_,
numerator / denominator)
}
# Iterate through each row in the config file
for (i in 1:nrow(config)) {
numerator_col <- config$Numerator[i]
denominator_col <- config$Denominator[i]
proportion_name <- config$Name[i]
# Check if columns exist in the data
if (!(numerator_col %in% names(data)) || !(denominator_col %in% names(data))) {
warning(paste("Columns", numerator_col, "or", denominator_col, "not found in data. Skipping."))
next
}
# Calculate the proportion
data <- data %>%
mutate(!!proportion_name := safe_proportion(!!sym(numerator_col), !!sym(denominator_col)))
# Move the new column after the numerator column
col_index <- which(names(data) == numerator_col)
data <- data %>%
relocate(!!proportion_name, .after = !!sym(numerator_col))
}
return(data)
}
# Sample data
library(tidyverse)
set.seed(123)  # for reproducibility
sample_data <- tibble(
`Clinical culture isolates with AST conducted` = sample(100:200, 5),
`Carbapenem-resistant clinical culture isolates` = sample(10:50, 5),
`Clinical culture isolates with CP testing conducted` = sample(80:150, 5),
`Clinical culture isolates with CP detected` = sample(5:30, 5),
`Clinical culture isolates with Gene/Enzyme testing conducted` = sample(70:130, 5),
`Clinical culture isolates with Gene/Enzyme detected` = sample(3:25, 5),
`CP or gene/enzyme testing conducted (number)` = sample(60:120, 5),
`CP or gene/enzyme detected (number)` = sample(2:20, 5)
)
# Display the sample data
print(sample_data)
# Configuration CSV content
config_csv <- '
Numerator,Denominator,Name
"Carbapenem-resistant clinical culture isolates","Clinical culture isolates with AST conducted","Proportion of isolates resistant to at least 1 carbapenem (%)"
"Clinical culture isolates with CP detected","Clinical culture isolates with CP testing conducted","Proportion of isolates with phenotypic CP detected (%)"
"Clinical culture isolates with Gene/Enzyme detected","Clinical culture isolates with Gene/Enzyme testing conducted","Proportion of isolates with gene/enzyme detected (%)"
"CP or gene/enzyme detected (number)","CP or gene/enzyme testing conducted (number)","Proportion of isolates identified as CPO (%)"
'
# Write the configuration to a CSV file
write_csv(read_csv(config_csv), "proportion_config.csv")
# Now you can use the function like this:
result <- calculate_bulk_proportions(sample_data, "proportion_config.csv")
# Display the result
print(result)
install.packages("vitae")
