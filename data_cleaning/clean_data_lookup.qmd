---
title: "R Function to Clean Data Using a Lookup Table"
format: html
editor: visual
---

## Quarto

```{r}
library(dplyr)
library(stringr)
library(dplyr)
library(readxl)

# Define the function to clean the data with removal of all numbers and special characters
clean_character_data <- function(text, case = "lower") {
  # Replace non-letter and non-space characters, including numbers, with nothing
  cleaned_text <- str_replace_all(text, "[^\\p{L}\\s]", "")
  # Replace multiple spaces and line breaks with a single space
  cleaned_text <- str_replace_all(cleaned_text, "\\s+", " ")
  # Trim leading and trailing spaces
  cleaned_text <- trimws(cleaned_text)
  # Apply the specified case transformation
  switch(case,
         "lower" = cleaned_text <- tolower(cleaned_text),
         "upper" = cleaned_text <- toupper(cleaned_text),
         "title" = cleaned_text <- tools::toTitleCase(cleaned_text),
         "sentence" = {
           cleaned_text <- tolower(cleaned_text)
           cleaned_text <- sub("^(.)", "\\U\\1", cleaned_text, perl = TRUE)
         },
         cleaned_text <- cleaned_text  # default to returning the cleaned text as is if no case match
  )
  return(cleaned_text)
}

# Example data frame with multi-line text and numbers
data <- tibble(
  raw_text = c("Hello, world! 123@#%@#^^", "Testing: 1, 2, 3.", "Clean? data! New line 456!")
)

# Use mutate to clean the data and apply different case options
clean_data <- data %>%
  mutate(clean_text_lower = clean_character_data(raw_text, case = "lower"),
         clean_text_upper = clean_character_data(raw_text, case = "upper"),
         clean_text_title = clean_character_data(raw_text, case = "title"),
         clean_text_sentence = clean_character_data(raw_text, case = "sentence"))

print(clean_data)


```

```{r}
Location <- read_excel("Location.xlsx")
Location
```

```{r}


# Define a function that always creates a lookup vector and cleans data
# Allows specifying the sheet of the Excel file; defaults to the first sheet if not specified
clean_data <- function(raw_value, excel_path, excel_raw_col = "Raw Location Value", excel_clean_col = "Clean Location Value", sheet = NULL) {
  # Load the lookup table from the specified or first sheet
  if (is.null(sheet)) {
    lookup_table <- read_excel(excel_path)
  } else {
    lookup_table <- read_excel(excel_path, sheet = sheet)
  }
  
  # Create the lookup vector
  lookup_vector <- setNames(lookup_table[[excel_clean_col]], lookup_table[[excel_raw_col]])
  
  # Return the cleaned value or the original if not found
  ifelse(is.na(lookup_vector[raw_value]), raw_value, lookup_vector[raw_value])
}

# Example usage:
# Assuming 'Location' is your dataframe and 'Raw Location Value' is the column to clean
# Specify the path to the Excel file, sheet, and relevant columns
Location <- Location %>%
  mutate(clean_location = clean_data(`Raw Location Value`, "Location_Lookup_Table.xlsx"),
         clean_location3 = clean_data(`Raw Location Value`, "Location_Lookup_Table.xlsx", sheet = 1))
Location
```




```         
/* Step 1: Import the Excel file into a SAS dataset */
libname myexcel EXCEL "path/to/your/Location_Lookup_Table.xlsx";
data lookup;
    set myexcel.'SpecificSheetName$'n; /* Specify the sheet name here */
run;
libname myexcel CLEAR;

/* Step 2: Create a lookup table in SAS */
data lookup_clean;
    set lookup;
    rename Raw_Location_Value = raw_location
           Clean_Location_Value = clean_location;
run;

/* Step 3: Apply the lookup to clean your data */
/* Assuming your main dataset is already loaded in SAS as 'main_data' */
data cleaned_data;
    merge main_data(in=a) lookup_clean(in=b rename=(raw_location=Raw_Location_Value));
    by Raw_Location_Value;
    if a;
    clean_location = coalesce(clean_location, Raw_Location_Value); /* Replace missing clean values with raw */
run;

/* Print the result to check */
proc print data=cleaned_data;
run;
```

```         
/* SAS macro to clean character data, removing numbers and special characters */
%macro clean_character_data(data=, var=, outvar=, case=lower);
   data _temp;
      set &data;
      /* Remove all numbers and special characters, retain only letters and spaces */
      &outvar = prxchange('s/[^a-zA-Z ]//', -1, &var);
      /* Collapse multiple spaces into a single space */
      &outvar = prxchange('s/\s+/ /', -1, &outvar);
      /* Trim leading and trailing spaces */
      &outvar = strip(&outvar);

      /* Convert text to specified case */
      select (lowcase("&case"));
         when ('lower') &outvar = lowcase(&outvar);
         when ('upper') &outvar = upcase(&outvar);
         when ('title') &outvar = propcase(&outvar);
         when ('sentence') do;
            /* Sentence case: lower everything then capitalize the first letter */
            &outvar = lowcase(&outvar);
            &outvar = catx(' ', propcase(scan(&outvar, 1)), substr(lowcase(&outvar), length(scan(&outvar, 1)) + 2));
         end;
         otherwise;
      end;
   run;
%mend clean_character_data;

/* Example usage of the macro */
data example;
   input raw_text $50.;
   datalines;
Hello, world! 123
Testing: 1, 2, 3.
Clean? data! New line 456!
;
run;

/* Apply the cleaning macro */
%clean_character_data(data=example, var=raw_text, outvar=clean_text, case=title);

/* Print the cleaned data */
proc print data=_temp;
run;
```
